name: CI & Docker build

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  test-and-build:
    runs-on: ubuntu-latest

    services:                 # lance Postgres pour Airflow si besoin
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: airflow
          POSTGRES_PASSWORD: airflow
          POSTGRES_DB: airflow
        ports: [5432:5432]
        options: >-
          --health-cmd "pg_isready -U airflow"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    # 1. Build l’image Airflow (elle contient les tests)
    - name: Build Airflow image
      run: docker compose build airflow

    # 2. Exécute Pytest dans l’image Airflow
    - name: Run tests
      env:
        MLFLOW_TRACKING_URI: http://dummy
        DATA_CSV_PATH: /opt/airflow/tests/fixtures/transactions.csv  
        AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: sqlite:////tmp/airflow_test.db
        
      run: |
        docker compose build airflow          # si pas déjà fait
        docker compose run --rm --entrypoint "" airflow \
          bash -c "airflow db init && pytest /opt/airflow/tests -q

    # 3. Build l’image API si les tests passent
    - name: Build API image
      run: docker compose build api

    # 4. Login au registre
    - name: Log-in to registry
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.REGISTRY_USER }}
        password: ${{ secrets.REGISTRY_PASSWORD }}

    # 5. Push avec SHA + latest
    - name: Push API image
      run: |
        IMAGE=fraude-api
        SHA=$(echo $GITHUB_SHA | cut -c1-7)
        docker tag fraude-detection-api:latest ${{ secrets.REGISTRY_USER }}/$IMAGE:latest
        docker tag fraude-detection-api:latest ${{ secrets.REGISTRY_USER }}/$IMAGE:$SHA
        docker push ${{ secrets.REGISTRY_USER }}/$IMAGE:latest
        docker push ${{ secrets.REGISTRY_USER }}/$IMAGE:$SHA
