services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-data:/var/lib/postgresql/data    # ← utilise le volume nommé

  airflow:
    build: .
    env_file: 
      - .env.ci 
    depends_on:
      - postgres
    environment:

      PYTHONPATH: /opt/airflow/dags 
      DATA_CSV_PATH: "/opt/airflow/data/transactions.csv"
      MLFLOW_TRACKING_URI: "https://ousmane-d-mlflow-server-demo.hf.space"
      AIRFLOW__CORE__EXECUTOR: SequentialExecutor
      AIRFLOW__CORE__LOAD_EXAMPLES: "False"
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_DEFAULT_REGION: eu-west-3
      
      # (éventuellement) MLFLOW_ARTIFACT_URI=s3://mon-bucket/mlflow-artifacts
    ports:
      - "8080:8080"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./tests:/opt/airflow/tests
      - ./data:/opt/airflow/data 
      -  ./mlruns:/opt/airflow/mlruns                 # ← tes DAGs
    command:
      - "bash"
      - "-c"
      - |
        airflow db init &&
        airflow users create --username admin --password admin --firstname Airflow --lastname Admin --role Admin --email admin@example.com &&
        airflow webserver &
        airflow scheduler
        airflow standalone
 
 
  api:
    build: ./api
    # si vous avez un fichier de secrets pour CI, gardez-le :
    env_file:
      - .env.ci
    ports:
      - "8000:8000"
    # ici on ne mélange pas mapping et liste, on utilise mapping
    environment:
      # chemin dans le container vers votre code monté
      PYTHONPATH: /app
      MODEL_STAGE: Production
      DATA_CSV_PATH: "/opt/airflow/tests/fixtures/transactions.csv"
      MLFLOW_TRACKING_URI: "http://dummy"
    # Montez votre dossier ./api dans /app pour que uvicorn trouve main.py
    command: uvicorn main:app --host 0.0.0.0 --port 8000
    depends_on:
      - airflow

volumes:
  postgres-data: